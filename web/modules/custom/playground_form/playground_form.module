<?php

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_type_alter().
 */
function playground_form_entity_type_alter(array &$entity_types) {
  // No longer needed as we are using form alter which is far more convenient than extending two form classes separately.
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  // $entity_types['user']->setFormClass('register', '\Drupal\playground_form\Form\NewRegisterForm');
  // $entity_types['user']->setFormClass('default', '\Drupal\playground_form\Form\NewProfileForm');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function playground_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
}

/**
 * Implements hook_form_FORM_alter().
 */
function playground_menu_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['user_form', 'user_register_form'], true)) {
    // Make Age field read only for users.
    $form['field_age']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['field_age']['widget'][0]['value']['#attributes']['class'][] = 'readonly';

    if (isset($form['field_date_of_birth'])) {
      // Add Ajax callback for DOB field to calculate Age.
      $form['field_date_of_birth']['widget'][0]['value'] += [
        '#ajax' => [
          'callback' => 'calculate_age',
          'event' => 'focusout',
          'disable-refocus' => TRUE,
          'progress' => [
            'type' => 'throbber',
            'message' => 'Calculating age',
          ],
        ],
      ];
    }


    /**
     * We no longer need below form properties to inject Ajax, add JS libraries and the getAddressList callback into the address text field.
     * Rather we will use an autocomplete controller to populate address suggestions for the user.
     */
    /**
     * $form['field_address']['widget'][0]['value']['#prefix'] = '<div id="custom-message">';
     * $form['field_address']['widget'][0]['value']['#suffix'] = '</div>';
     * $form['field_address']['widget'][0]['value']['#attached'] = [
     * 'library' => ['playground_form/form-js'],
     * ];
     * $form['field_address']['widget'][0]['value']['#ajax'] = [
     * 'callback' => [$this, 'getAddressList'],
     * 'disable-refocus' => FALSE,
     * // 'event' => 'keyup',
     * 'event' => 'overminlength',
     * 'progress' => [
     * 'type' => 'throbber',
     * 'message' => $this->t('Searching...'),
     * ],
     * ];
     **/

    $form['field_address']['widget'][0]['value']['#placeholder'] = 'Please enter your address.';
    $form['field_address']['widget'][0]['value']['#description'] = ' ';
    $form['field_address']['widget'][0]['value']['#autocomplete_route_name'] = 'playground_address_search.autocomplete';

    // Assigning the field_about_me description with a space will render it on FE,
    // and we can use this later in the Ajax callback.
    $form['field_about_me']['widget'][0]['value']['#description'] = ' ';
    $form['field_about_me']['widget'][0]['value']['#maxlength'] = 300;
    $form['field_about_me']['widget'][0]['value']['#ajax'] = [
      'callback' => '::countCharactersAjaxCallback',
      'disable-refocus' => TRUE,
      'event' => 'change',
      'progress' => [
        'type' => 'throbber',
        'message' => t('Calculating entry...'),
      ],
    ];

    $form['field_postcode']['widget'][0]['value']['#maxlength'] = 4;
  }
}

/**
 * Get age when DOB provided.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function calculate_age($form, FormStateInterface $form_state): AjaxResponse {
  $response = new AjaxResponse();
  $date = $form_state->getValue('field_date_of_birth')[0]['value']['date'];
  $age = date_diff(date_create('today'), date_create($date), TRUE);
  return $response->addCommand(new InvokeCommand('#edit-field-age-0-value', 'val', [$age->y]));
}

/**
 * Implements hook_field_group_form_process_alter().
 */
function playground_form_field_group_form_process_alter(array &$element, &$group, &$complete_form) {
  if ($group->group_name === 'group_about_me') {
    $element['#field_prefix'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t('Please share a bit about you.'),
      '#attributes' => [
        'id' => 'about_me_group_prefix',
      ],
    ];
  }
  if ($group->group_name === 'group_contact_details') {
    $element['#field_suffix'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t('Don\'t worry, we won\'t subscribe you to our mailing list.'),
      '#attributes' => [
        'id' => 'contact_group_prefix',
      ],
    ];
  }
}

/**
 * Calculates the number of characters of field_about_me field.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function countCharactersAjaxCallback(array &$form, FormStateInterface $form_state): AjaxResponse {
  $response = new AjaxResponse();
  $size = strlen($form_state->getValue('field_about_me')[0]['value']);
  $max_size = $form['field_about_me']['widget'][0]['value']['#maxlength'];
  $text = '%d out of %d characters used.';
  $response->addCommand(new InvokeCommand('#edit-field-about-me-0-value--description', 'text', [sprintf($text, $size, $max_size)]));
  return $response;
}

/**
 * Ajax Callback function to return a list of Addresses for user input.
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function getAddressList(&$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $query = $form_state->getValue('field_address')[0]['value'];

  // Use Address Search Service.
  $service = \Drupal::service('playground_address_search.connection');
  $addresses = $service->getAddresses($query);
  $isError = gettype($addresses) === 'array' ?? TRUE;

  if ($isError && array_key_exists('error', $addresses)) {
    // If there is an error with the Address Search API,
    // Let user enter address manually without Ajax callback.
    $form['field_address']['widget'][0]['value'] ['#ajax'] = [];
    $form['field_address']['widget'][0]['value']['#description'] = 'Please enter address manually';

    // Render the field_address with the stripped ajax property.
    $rendered_array = \Drupal::service('renderer')
      ->renderRoot($form['field_address']['widget'][0]);
    return $response->addCommand(new ReplaceCommand('#custom-message', ['#markup' => $rendered_array]));
  } else {
    // @TODO Update code here to a Ajax response command.
    $list = json_decode($addresses, FALSE);
    return $response;
  }
}
